// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// datasource sqlite {
//   provider = "sqlite"
//   url = "***"
// }

// SQLite is easy to start with, but if you use Postgres in production
// you should also use it in development with the following:
datasource postgresql {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["transactionApi", "connectOrCreate"]
}

// --------------------------------------

enum PostStatus {
  draft
  published
}

model User {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           String    @default("user")
  sessions       Session[]
  posts          Post[]
  followedBy     User[]    @relation("UserFollows", references: [id])
  following      User[]    @relation("UserFollows", references: [id])
  favorites      Post[]    @relation("Favorites", references: [id])
  comments       Comment[]
  bio            String    @default("")
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             String?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

model Post {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  intro       String
  content     String
  tags        Tag[]      @relation(references: [id])
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  favoritedBy User[]     @relation("Favorites", references: [id])
  comments    Comment[]
  status      PostStatus @default(draft)
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  posts     Post[]   @relation(references: [id])
}
